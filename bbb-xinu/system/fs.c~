#include <xinu.h>
#include <kernel.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>


#if FS
#include <fs.h>

static struct fsystem fsd; 
int dev0_numblocks;
int dev0_blocksize;
char *dev0_blocks;

int f_count = 0;
int finode_count = 0;

extern int dev0;

char block_cache[512];

#define SB_BLK 0
#define BM_BLK 1
#define RT_BLK 2

#define NUM_FD 16
struct filetable oft[NUM_FD];
int next_open_fd = 0;


#define INODES_PER_BLOCK (fsd.blocksz / sizeof(struct inode))
#define NUM_INODE_BLOCKS (( (fsd.ninodes % INODES_PER_BLOCK) == 0) ? fsd.ninodes / INODES_PER_BLOCK : (fsd.ninodes / INODES_PER_BLOCK) + 1)
#define FIRST_INODE_BLOCK 2

int fs_fileblock_to_diskblock(int dev, int fd, int fileblock);

/* YOUR CODE GOES HERE */

int fs_fileblock_to_diskblock(int dev, int fd, int fileblock) {
  int diskblock;

  if (fileblock >= INODEBLOCKS - 2) {
    printf("No indirect block support\n");
    return SYSERR;
  }

  diskblock = oft[fd].in.blocks[fileblock]; //get the logical block address

  return diskblock;
}

/* read in an inode and fill in the pointer */
int
fs_get_inode_by_num(int dev, int inode_number, struct inode *in) {
  int bl, inn;
  int inode_off;

  if (dev != 0) {
    printf("Unsupported device\n");
    return SYSERR;
  }
  if (inode_number > fsd.ninodes) {
    printf("fs_get_inode_by_num: inode %d out of range\n", inode_number);
    return SYSERR;
  }

  bl = inode_number / INODES_PER_BLOCK;
  inn = inode_number % INODES_PER_BLOCK;
  bl += FIRST_INODE_BLOCK;

  inode_off = inn * sizeof(struct inode);

  /*
  printf("in_no: %d = %d/%d\n", inode_number, bl, inn);
  printf("inn*sizeof(struct inode): %d\n", inode_off);
  */

  bs_bread(dev0, bl, 0, &block_cache[0], fsd.blocksz);
  memcpy(in, &block_cache[inode_off], sizeof(struct inode));

  return OK;

}

int
fs_put_inode_by_num(int dev, int inode_number, struct inode *in) {
  int bl, inn;

  if (dev != 0) {
    printf("Unsupported device\n");
    return SYSERR;
  }
  if (inode_number > fsd.ninodes) {
    printf("fs_put_inode_by_num: inode %d out of range\n", inode_number);
    return SYSERR;
  }

  bl = inode_number / INODES_PER_BLOCK;
  inn = inode_number % INODES_PER_BLOCK;
  bl += FIRST_INODE_BLOCK;

  /*
  printf("in_no: %d = %d/%d\n", inode_number, bl, inn);
  */

  bs_bread(dev0, bl, 0, block_cache, fsd.blocksz);
  memcpy(&block_cache[(inn*sizeof(struct inode))], in, sizeof(struct inode));
  bs_bwrite(dev0, bl, 0, block_cache, fsd.blocksz);

  return OK;
}
     
int fs_mkfs(int dev, int num_inodes) {
  int i;
  
  if (dev == 0) {
    fsd.nblocks = dev0_numblocks;
    fsd.blocksz = dev0_blocksize;
  }
  else {
    printf("Unsupported device\n");
    return SYSERR;
  }

  if (num_inodes < 1) {
    fsd.ninodes = DEFAULT_NUM_INODES;
  }
  else {
    fsd.ninodes = num_inodes;
  }

  i = fsd.nblocks;
  while ( (i % 8) != 0) {i++;}
  fsd.freemaskbytes = i / 8; 
  
  if ((fsd.freemask = getmem(fsd.freemaskbytes)) == (void *)SYSERR) {
    printf("fs_mkfs memget failed.\n");
    return SYSERR;
  }
  
  /* zero the free mask */
  for(i=0;i<fsd.freemaskbytes;i++) {
    fsd.freemask[i] = '\0';
  }
  
  fsd.inodes_used = 0;
  
  /* write the fsystem block to SB_BLK, mark block used */
  fs_setmaskbit(SB_BLK);
  bs_bwrite(dev0, SB_BLK, 0, &fsd, sizeof(struct fsystem));
  
  /* write the free block bitmask in BM_BLK, mark block used */
  fs_setmaskbit(BM_BLK);
  bs_bwrite(dev0, BM_BLK, 0, fsd.freemask, fsd.freemaskbytes);

  return 1;
}

void
fs_print_fsd(void) {

  printf("fsd.ninodes: %d\n", fsd.ninodes);
  printf("sizeof(struct inode): %d\n", sizeof(struct inode));
  printf("INODES_PER_BLOCK: %d\n", INODES_PER_BLOCK);
  printf("NUM_INODE_BLOCKS: %d\n", NUM_INODE_BLOCKS);
}

/* specify the block number to be set in the mask */
int fs_setmaskbit(int b) {
  int mbyte, mbit;
  mbyte = b / 8;
  mbit = b % 8;

  fsd.freemask[mbyte] |= (0x80 >> mbit);
  return OK;
}

/* specify the block number to be read in the mask */
int fs_getmaskbit(int b) {
  int mbyte, mbit;
  mbyte = b / 8;
  mbit = b % 8;

  return( ( (fsd.freemask[mbyte] << mbit) & 0x80 ) >> 7);
  return OK;

}

/* specify the block number to be unset in the mask */
int fs_clearmaskbit(int b) {
  int mbyte, mbit, invb;
  mbyte = b / 8;
  mbit = b % 8;

  invb = ~(0x80 >> mbit);
  invb &= 0xFF;

  fsd.freemask[mbyte] &= invb;
  return OK;
}

/* This is maybe a little overcomplicated since the lowest-numbered
   block is indicated in the high-order bit.  Shift the byte by j
   positions to make the match in bit7 (the 8th bit) and then shift
   that value 7 times to the low-order bit to print.  Yes, it could be
   the other way...  */
void fs_printfreemask(void) {
  int i,j;

  for (i=0; i < fsd.freemaskbytes; i++) {
    for (j=0; j < 8; j++) {
      printf("%d", ((fsd.freemask[i] << j) & 0x80) >> 7);
    }
    if ( (i % 8) == 7) {
      printf("\n");
    }
  }
  printf("\n");
}

// implementing fcreate()

int fs_create(char *filename, int mode){

// Step:1 allocate free inode to the file

struct inode f_inode;
int check_fexists = 0, i;

if(mode == 11) // implies O_CREAT is set
{

//step2: check if a file with same name exists

	for(i =0 ; i< fsd.root_dir.numentries; i++){
	if(strncmp(fsd.root_dir.entry[i].name, filename, strlen(filename) == 0)){
		kprintf("File already exists");
		check_fexists = 1;
	}	return SYSERR;}

//step3: else create a file table entry 
	if(check_fexists == 0){
	  	fsd.root_dir.numentries = fsd.root_dir.numentries + 1;
 		fsd.root_dir.entry[f_count].inode_num = finode_count;
		fsd.root_dir.entry[f_count].name = filename;	 
		f_count++;
		finode_count++;

		f_inode.id = 0;
		f_inode.device = 0;
		f_inode.size = 0;
		f_inode.type = 1;

		fs_put_inode_by_num(0, 0, &f_inode);}
}

return 0;	
}

int fs_open(char *filename, int flags){
/* check if file is already opened  by going through all file table entries*/

struct inode f_inode;
int check_fopened = 0, fd, i;

for(i =0 ; i< fsd.root_dir.numentries; i++){
	if(strncmp(fsd.root_dir.entry[i].name, filename, strlen(filename) == 0)){
		if(oft[i].state == FSTATE_OPEN){
			if(flags == 0) /*file opened for reading */
			kprintf("File already opened for reading");
			if(flags == 1 || flags == 2) /*file opened for writing */
			kprintf("File already opened for writing");
			check_fopened = 1;
			fd = oft[i].fileptr;} // return file descriptor
 		if(oft[i].state == FSTATE_CLOSED){
			oft[next_open_fd].state = flags;
			oft[next_open_fd].fileptr = 0;
			oft[next_open_fd].de = i;
			oft[next_open_fd].in.id = fsd.root_dir.entry[i].inode_num;
			oft[next_open_fd].fname = filename;
			fd = oft[next_open_fd].fileptr;} //return file descriptor	
	}
}

next_open_fd = next_open_fd + 1;
return fd;
}	

int fs_seek(int fd, int offset){
fd = fd + offset; // make fd point location at offset
return fd;
}

int fs_close(int fd){
int i;

for(i = 0; i<next_open_fd; i++){
	if(oft[i].fileptr == fd){
		oft[i].fname = NULL;
	        oft[i].state = NULL;
        	oft[i].de =  NULL;
                oft[i].in.id = NULL;}
}
next_open_fd--;
return OK;
}

int fs_read(int fd, char *buf, int nbytes){
int i, inode_number;
struct inode f_inode;
for(i = 0; i<next_open_fd; i++){
	if(oft[i].fileptr == fd){
		// get the inode_num from oft
		inode_number = oft[i].in.id;
		break;}
}

//call to the function
fs_get_inode_by_num(0, inode_number, &f_inode);

// read the number of bytes of the file and write to buf 
fptr = fd;
byte_count = nbytes;
char data_bread[MDEV_BLOCK_SIZE];
int j =0;

while(nbytes > 0){

// read into the device to the file decsriptor position
	for(i =0; i< f_inode.size; i++){
		if(fptr >  MDEV_BLOCK_SIZE){
			fptr = fptr - MDEV_BLOCK_SIZE;}
		else{
		//read the data by calling bread
		bread(0, f_inode.blocks[i], 0, data_bread, MDEV_BLOCK_SIZE);
		for(k=0;k<MDEV_BLOCK_SIZE;k++){
		if (fptr > 0){
			fptr--;
			continue;}
		else{
			buf[j] = data_bread[k];
			j++;
			nbytes--;}
		if (nbytes == 0)
		break;}
		}
	}
}
fd = fd + byte_count;
return fd;
}

int fs_write(int fd, char *buf, int nbytes){
int i, inode_number;
struct inode f_inode;
for(i = 0; i<next_open_fd; i++){
	if(oft[i].fileptr == fd){
		// get the inode_num from oft
		inode_number = oft[i].in.id;
		break;}
}

//call to the function
fs_get_inode_by_num(0, inode_number, &f_inode);
int j =0;
int block_num, counter = 0;

// copy the buf  to data_bwrite
char data_bwrite[MDEV_BLOCK_SIZE];
while(nbytes > 0){
	for(i=0;i<MDEV_BLOCK_SIZE;i++){
		data_bwrite[i] = buf[j];
		j++;
		nbytes--;}
	block_num = INODEBLOCKS + counter;
	bwrite(0, block_num, 0, data_bwrite, sizeof(data_bwrite);
	f_inode.size++;
	f_inode.blocks[counter] = block_num;
	fd = fd + sizeof(data_bwrite);
	counter++;	
}

fs_put_inode_by_num(0, inode_number, &f_inode); 	

return fd;
}


#endif /* FS */

